/**
// ====================================================================================================
Change Log:

1.0.5 (22-January-2021)
    - Added cvar to allow explode projectiles on touch. (thanks "Manoa" for requesting)

1.0.4 (31-December-2020)
    - Added cvar to control plugin behaviour for bots.
    - Added cvar to control plugin behaviour for teams.
    - Added cvar to control which SI can trigger explosions on unequipped throwables.

1.0.3 (26-December-2020)
    - Added support to all types of damage to trigger the explosion.
    - Added option to apply the explosion effect also on ground items (thanks "strikeraot" for requesting).
    - Added cvar to control the vomit jar particle and infected chase time (same cvar).
    - Fixed a bug where infecteds would try to chase at the 0,0,0 pos, after a vomit jar explosion.
    - Fixed a bug where dropped items won't trigger explosions.

1.0.2 (31-October-2020)
    - Added cvar to delay the fire spots generated by molotovs.

1.0.1 (16-October-2020)
    - Added better cvar handling for L4D1.

1.0.0 (12-October-2020)
    - Initial release.

// ====================================================================================================
*/

// ====================================================================================================
// Plugin Info - define
// ====================================================================================================
#define PLUGIN_NAME                   "[L4D1 & L4D2] Projectile Hittable"
#define PLUGIN_AUTHOR                 "Mart"
#define PLUGIN_DESCRIPTION            "Allows projectiles and throwables to explode when hit"
#define PLUGIN_VERSION                "1.0.5"
#define PLUGIN_URL                    "https://forums.alliedmods.net/showthread.php?t=327838"

// ====================================================================================================
// Plugin Info
// ====================================================================================================
public Plugin myinfo =
{
    name        = PLUGIN_NAME,
    author      = PLUGIN_AUTHOR,
    description = PLUGIN_DESCRIPTION,
    version     = PLUGIN_VERSION,
    url         = PLUGIN_URL
}

// ====================================================================================================
// Includes
// ====================================================================================================
#include <sourcemod>
#include <sdktools>
#include <sdkhooks>

// ====================================================================================================
// Pragmas
// ====================================================================================================
#pragma semicolon 1
#pragma newdecls required

// ====================================================================================================
// Cvar Flags
// ====================================================================================================
#define CVAR_FLAGS                    FCVAR_NOTIFY
#define CVAR_FLAGS_PLUGIN_VERSION     FCVAR_NOTIFY|FCVAR_DONTRECORD|FCVAR_SPONLY

// ====================================================================================================
// Filenames
// ====================================================================================================
#define CONFIG_FILENAME               "l4d_projectile_hittable"
#define TRANSLATION_FILENAME          "l4d_projectile_hittable.phrases"

// ====================================================================================================
// Defines
// ====================================================================================================
#define CLASSNAME_WEAPON_MOLOTOV               "weapon_molotov"
#define CLASSNAME_WEAPON_PIPEBOMB              "weapon_pipe_bomb"
#define CLASSNAME_WEAPON_VOMITJAR              "weapon_vomitjar"

#define CLASSNAME_MOLOTOV_PROJECTILE           "molotov_projectile"
#define CLASSNAME_PIPEBOMB_PROJECTILE          "pipe_bomb_projectile"
#define CLASSNAME_INFO_GOAL_INFECTED_CHASE     "info_goal_infected_chase"

#define MODEL_MOLOTOV                          "models/w_models/weapons/w_eq_molotov.mdl"
#define MODEL_PIPEBOMB                         "models/w_models/weapons/w_eq_pipebomb.mdl"
#define MODEL_VOMITJAR                         "models/w_models/weapons/w_eq_bile_flask.mdl"
#define MODEL_GRENADE_LAUNCHER_BULLET          "models/w_models/weapons/w_HE_grenade.mdl"

#define PARTICLE_MOLOTOV                       "molotov_explosion"
#define PARTICLE_VOMITJAR                      "vomit_jar"

#define SOUND_GLASS_BOTTLE_BREAK2              "physics/glass/glass_bottle_break2.wav"
#define SOUND_VOMITJAR                         ")weapons/ceda_jar/ceda_jar_explode.wav"

#define TEAM_SPECTATOR                1
#define TEAM_SURVIVOR                 2
#define TEAM_INFECTED                 3
#define TEAM_HOLDOUT                  4

#define FLAG_TEAM_NONE                (0 << 0) // 0 | 0000
#define FLAG_TEAM_SURVIVOR            (1 << 0) // 1 | 0001
#define FLAG_TEAM_INFECTED            (1 << 1) // 2 | 0010
#define FLAG_TEAM_SPECTATOR           (1 << 2) // 4 | 0100
#define FLAG_TEAM_HOLDOUT             (1 << 3) // 8 | 1000

#define L4D2_ZOMBIECLASS_SMOKER       1
#define L4D2_ZOMBIECLASS_BOOMER       2
#define L4D2_ZOMBIECLASS_HUNTER       3
#define L4D2_ZOMBIECLASS_SPITTER      4
#define L4D2_ZOMBIECLASS_JOCKEY       5
#define L4D2_ZOMBIECLASS_CHARGER      6
#define L4D2_ZOMBIECLASS_TANK         8

#define L4D1_ZOMBIECLASS_SMOKER       1
#define L4D1_ZOMBIECLASS_BOOMER       2
#define L4D1_ZOMBIECLASS_HUNTER       3
#define L4D1_ZOMBIECLASS_TANK         5

#define L4D2_FLAG_ZOMBIECLASS_NONE    0
#define L4D2_FLAG_ZOMBIECLASS_SMOKER  1
#define L4D2_FLAG_ZOMBIECLASS_BOOMER  2
#define L4D2_FLAG_ZOMBIECLASS_HUNTER  4
#define L4D2_FLAG_ZOMBIECLASS_SPITTER 8
#define L4D2_FLAG_ZOMBIECLASS_JOCKEY  16
#define L4D2_FLAG_ZOMBIECLASS_CHARGER 32
#define L4D2_FLAG_ZOMBIECLASS_TANK    64

#define L4D1_FLAG_ZOMBIECLASS_NONE    0
#define L4D1_FLAG_ZOMBIECLASS_SMOKER  1
#define L4D1_FLAG_ZOMBIECLASS_BOOMER  2
#define L4D1_FLAG_ZOMBIECLASS_HUNTER  4
#define L4D1_FLAG_ZOMBIECLASS_TANK    8

#define CLASS_NONE                    0
#define CLASS_PROJECTILE              1
#define CLASS_WEAPON                  2

#define TYPE_NONE                     0
#define TYPE_MOLOTOV                  1
#define TYPE_PIPEBOMB                 2
#define TYPE_VOMITJAR                 3
#define TYPE_GRENADELAUNCHER          4

#define ENTITY_WORLDSPAWN             0

#define DAMAGE_NO                     0
#define DAMAGE_YES                    2

#define BOT_SURVIVOR                  1
#define BOT_INFECTED                  2

#define MAXENTITIES                   2048

// ====================================================================================================
// Plugin Cvars
// ====================================================================================================
static ConVar g_hCvar_Enabled;
static ConVar g_hCvar_Bots;
static ConVar g_hCvar_Team;
static ConVar g_hCvar_AnnounceTeam;
static ConVar g_hCvar_AnnounceSelf;
static ConVar g_hCvar_Molotov;
static ConVar g_hCvar_MolotovTouch;
static ConVar g_hCvar_MolotovAnnounce;
static ConVar g_hCvar_MolotovDelay;
static ConVar g_hCvar_PipeBomb;
static ConVar g_hCvar_PipeBombTouch;
static ConVar g_hCvar_PipeBombAnnounce;
static ConVar g_hCvar_VomitJar;
static ConVar g_hCvar_VomitJarTouch;
static ConVar g_hCvar_VomitJarAnnounce;
static ConVar g_hCvar_VomitJarDuration;
static ConVar g_hCvar_Grenade;
static ConVar g_hCvar_GrenadeAnnounce;
static ConVar g_hCvar_SI;

// ====================================================================================================
// bool - Plugin Variables
// ====================================================================================================
static bool   g_bL4D2;
static bool   g_bConfigLoaded;
static bool   g_bEventsHooked;
static bool   g_bCvar_Enabled;
static bool   g_bCvar_Bots;
static bool   g_bCvar_Team;
static bool   g_bCvar_AnnounceTeam;
static bool   g_bCvar_AnnounceSelf;
static bool   g_bCvar_MolotovTouch;
static bool   g_bCvar_MolotovDelay;
static bool   g_bCvar_MolotovAnnounce;
static bool   g_bCvar_PipeBombTouch;
static bool   g_bCvar_PipeBombAnnounce;
static bool   g_bCvar_VomitJarTouch;
static bool   g_bCvar_VomitJarAnnounce;
static bool   g_bCvar_Grenade;
static bool   g_bCvar_GrenadeAnnounce;

// ====================================================================================================
// int - Plugin Variables
// ====================================================================================================
static int    g_iModel_Molotov = -1;
static int    g_iModel_Pipebomb = -1;
static int    g_iModel_Vomitjar = -1;
static int    g_iModel_GrenadeLauncherBullet = -1;
static int    g_iCvar_Bots;
static int    g_iCvar_Team;
static int    g_iCvar_AnnounceTeam;
static int    g_iCvar_Molotov;
static int    g_iCvar_PipeBomb;
static int    g_iCvar_VomitJar;
static int    g_iCvar_SI;

// ====================================================================================================
// float - Plugin Variables
// ====================================================================================================
static float  g_fCvar_MolotovDelay;
static float  g_fCvar_VomitJarDuration;

// ====================================================================================================
// entity - Plugin Variables
// ====================================================================================================
static int    ge_iClass[MAXENTITIES+1];
static int    ge_iType[MAXENTITIES+1];

// ====================================================================================================
// Plugin Start
// ====================================================================================================
public APLRes AskPluginLoad2(Handle myself, bool late, char[] error, int err_max)
{
    EngineVersion engine = GetEngineVersion();

    if (engine != Engine_Left4Dead && engine != Engine_Left4Dead2)
    {
        strcopy(error, err_max, "This plugin only runs in \"Left 4 Dead\" and \"Left 4 Dead 2\" game");
        return APLRes_SilentFailure;
    }

    g_bL4D2 = (engine == Engine_Left4Dead2);

    return APLRes_Success;
}

/****************************************************************************************************/

public void OnPluginStart()
{
    LoadPluginTranslations();

    CreateConVar("l4d_projectile_hittable_version", PLUGIN_VERSION, PLUGIN_DESCRIPTION, CVAR_FLAGS_PLUGIN_VERSION);
    g_hCvar_Enabled              = CreateConVar("l4d_projectile_hittable_enable", "1", "Enable/Disable the plugin.\n0 = Disable, 1 = Enable.", CVAR_FLAGS, true, 0.0, true, 1.0);
    g_hCvar_Bots                 = CreateConVar("l4d_projectile_hittable_bots", "9", "Plugin behaviour enabled for bots.\n0 = NONE, 1 = SURVIVOR, 2 = INFECTED, 4 = SPECTATOR, 8 = HOLDOUT.\nAdd numbers greater than 0 for multiple options.\nExample: \"3\", enables for SURVIVOR and INFECTED bots.", CVAR_FLAGS, true, 0.0, true, 15.0);
    g_hCvar_Team                 = CreateConVar("l4d_projectile_hittable_team", "11", "Plugin behaviour enabled for these teams.\n0 = NONE, 1 = SURVIVOR, 2 = INFECTED, 4 = SPECTATOR, 8 = HOLDOUT.\nAdd numbers greater than 0 for multiple options.\nExample: \"3\", enables for SURVIVOR and INFECTED.", CVAR_FLAGS, true, 0.0, true, 15.0);
    g_hCvar_AnnounceTeam         = CreateConVar("l4d_projectile_hittable_announce_team", "1", "Which teams should the message be transmitted to.\n0 = NONE, 1 = SURVIVOR, 2 = INFECTED, 4 = SPECTATOR, 8 = HOLDOUT.\nAdd numbers greater than 0 for multiple options.\nExample: \"3\", enables for SURVIVOR and INFECTED.", CVAR_FLAGS, true, 0.0, true, 15.0);
    g_hCvar_AnnounceSelf         = CreateConVar("l4d_projectile_hittable_announce_self", "1", "Should the message be transmitted to those who hit it.\n0 = OFF, 1 = ON.", CVAR_FLAGS, true, 0.0, true, 1.0);
    g_hCvar_Molotov              = CreateConVar("l4d_projectile_hittable_molotov", "3", "Allow molotovs to explode when hit.\n0 = OFF, 1 = Only thrown molotovs (projectile), 2 = Only ground molotovs (weapon).\nExample: \"3\", enables explosion for thrown and ground molotovs.", CVAR_FLAGS, true, 0.0, true, 3.0);
    g_hCvar_MolotovTouch         = CreateConVar("l4d_projectile_hittable_molotov_touch", "1", "Allow molotov projectiles to explode on touch.\n0 = OFF, 1 = ON.", CVAR_FLAGS, true, 0.0, true, 1.0);
    g_hCvar_MolotovAnnounce      = CreateConVar("l4d_projectile_hittable_molotov_announce", "1", "Output to the chat every time someone hits a molotov.\n0 = OFF, 1 = ON.", CVAR_FLAGS, true, 0.0, true, 1.0);
    g_hCvar_MolotovDelay         = CreateConVar("l4d_projectile_hittable_molotov_delay", "1.0", "Delay in seconds to molotov create fire spots when hit.", CVAR_FLAGS, true, 0.0);
    g_hCvar_PipeBomb             = CreateConVar("l4d_projectile_hittable_pipebomb", "3", "Allow pipe bombs to explode when hit.\n0 = OFF, 1 = Only thrown pipe bombs (projectile), 2 = Only ground pipe bombs (weapon).\nExample: \"3\", enables explosion for thrown and ground pipe bombs.", CVAR_FLAGS, true, 0.0, true, 3.0);
    g_hCvar_PipeBombTouch        = CreateConVar("l4d_projectile_hittable_pipebomb_touch", "1", "Allow pipe bomb projectiles to explode on touch.\n0 = OFF, 1 = ON.", CVAR_FLAGS, true, 0.0, true, 1.0);
    g_hCvar_PipeBombAnnounce     = CreateConVar("l4d_projectile_hittable_pipebomb_announce", "1", "Output to the chat every time someone hits a pipe bomb.\n0 = OFF, 1 = ON.", CVAR_FLAGS, true, 0.0, true, 1.0);

    if (g_bL4D2)
    {
        g_hCvar_VomitJar         = CreateConVar("l4d_projectile_hittable_vomitjar", "3", "Allow vomit jars to explode when hit.\n0 = OFF, 1 = Only thrown vomitjars (projectile), 2 = Only ground vomitjars (weapon).\nExample: \"3\", enables explosion for thrown and ground vomit jars.", CVAR_FLAGS, true, 0.0, true, 3.0);
        g_hCvar_VomitJarTouch    = CreateConVar("l4d_projectile_hittable_vomitjar_touch", "1", "Allow vomit jar projectiles to explode on touch.\n0 = OFF, 1 = ON.", CVAR_FLAGS, true, 0.0, true, 1.0);
        g_hCvar_VomitJarAnnounce = CreateConVar("l4d_projectile_hittable_vomitjar_announce", "1", "Output to the chat every time someone hits a vomit jar.\nL4D2 only.\n0 = OFF, 1 = ON.", CVAR_FLAGS, true, 0.0, true, 1.0);
        g_hCvar_VomitJarDuration = CreateConVar("l4d_projectile_hittable_vomitjar_duration", "20.0", "How long (in seconds) the vomit particle and the infected chase should last.", CVAR_FLAGS, true, 0.0);
        g_hCvar_Grenade          = CreateConVar("l4d_projectile_hittable_grenade", "1", "Allow grenades to explode when hit.\nL4D2 only.\n0 = OFF, 1 = ON.", CVAR_FLAGS, true, 0.0, true, 1.0);
        g_hCvar_GrenadeAnnounce  = CreateConVar("l4d_projectile_hittable_grenade_announce", "1", "Output to the chat every time someone hits a grenade.\nL4D2 only.\n0 = OFF, 1 = ON.", CVAR_FLAGS, true, 0.0, true, 1.0);
    }

    if (g_bL4D2)
        g_hCvar_SI               = CreateConVar("l4d_projectile_hittable_si", "0", "Which Specials can trigger unequipped throwables explosions.\n1=SMOKER, 2 = BOOMER, 4 = HUNTER, 8 = SPITTER, 16 = JOCKEY, 32 = CHARGER, 64 = TANK.\nAdd numbers greater than 0 for multiple options.\nExample: \"127\", enables explosion for all SI.", CVAR_FLAGS, true, 0.0, true, 127.0);
    else
        g_hCvar_SI               = CreateConVar("l4d_projectile_hittable_si", "0", "Which Specials can trigger unequipped throwables explosions.\n1 = SMOKER, 2  =  BOOMER, 4 = HUNTER, 8 = TANK.\nAdd numbers greater than 0 for multiple options.\nExample: \"15\", enables explosion for all SI.", CVAR_FLAGS, true, 0.0, true, 15.0);

    // Hook plugin ConVars change
    g_hCvar_Enabled.AddChangeHook(Event_ConVarChanged);
    g_hCvar_Bots.AddChangeHook(Event_ConVarChanged);
    g_hCvar_AnnounceTeam.AddChangeHook(Event_ConVarChanged);
    g_hCvar_AnnounceSelf.AddChangeHook(Event_ConVarChanged);
    g_hCvar_Molotov.AddChangeHook(Event_ConVarChanged);
    g_hCvar_MolotovTouch.AddChangeHook(Event_ConVarChanged);
    g_hCvar_MolotovAnnounce.AddChangeHook(Event_ConVarChanged);
    g_hCvar_MolotovDelay.AddChangeHook(Event_ConVarChanged);
    g_hCvar_PipeBomb.AddChangeHook(Event_ConVarChanged);
    g_hCvar_PipeBombTouch.AddChangeHook(Event_ConVarChanged);
    g_hCvar_PipeBombAnnounce.AddChangeHook(Event_ConVarChanged);

    if (g_bL4D2)
    {
        g_hCvar_VomitJar.AddChangeHook(Event_ConVarChanged);
        g_hCvar_VomitJarTouch.AddChangeHook(Event_ConVarChanged);
        g_hCvar_VomitJarAnnounce.AddChangeHook(Event_ConVarChanged);
        g_hCvar_VomitJarDuration.AddChangeHook(Event_ConVarChanged);
        g_hCvar_Grenade.AddChangeHook(Event_ConVarChanged);
        g_hCvar_GrenadeAnnounce.AddChangeHook(Event_ConVarChanged);
    }

    g_hCvar_SI.AddChangeHook(Event_ConVarChanged);

    // Load plugin configs from .cfg
    AutoExecConfig(true, CONFIG_FILENAME);

    // Admin Commands
    RegAdminCmd("sm_print_cvars_l4d_projectile_hittable", CmdPrintCvars, ADMFLAG_ROOT, "Prints the plugin related cvars and their respective values to the console.");
}

/****************************************************************************************************/

public void LoadPluginTranslations()
{
    char path[PLATFORM_MAX_PATH];
    BuildPath(Path_SM, path, PLATFORM_MAX_PATH, "translations/%s.txt", TRANSLATION_FILENAME);
    if (FileExists(path))
        LoadTranslations(TRANSLATION_FILENAME);
    else
        SetFailState("Missing required translation file on \"translations/%s.txt\", please re-download.", TRANSLATION_FILENAME);
}

/****************************************************************************************************/

public void OnMapStart()
{
    PrecacheSound(SOUND_GLASS_BOTTLE_BREAK2);
    PrecacheParticle(PARTICLE_MOLOTOV);

    g_iModel_Molotov = PrecacheModel(MODEL_MOLOTOV, true);
    g_iModel_Pipebomb = PrecacheModel(MODEL_PIPEBOMB, true);

    if (g_bL4D2)
    {
        PrecacheSound(SOUND_VOMITJAR);
        PrecacheParticle(PARTICLE_VOMITJAR);

        g_iModel_Vomitjar = PrecacheModel(MODEL_VOMITJAR, true);
        g_iModel_GrenadeLauncherBullet = PrecacheModel(MODEL_GRENADE_LAUNCHER_BULLET, true);
    }
}

/****************************************************************************************************/

public void OnConfigsExecuted()
{
    GetCvars();

    g_bConfigLoaded = true;

    LateLoad();

    HookEvents(g_bCvar_Enabled);
}

/****************************************************************************************************/

public void Event_ConVarChanged(Handle convar, const char[] sOldValue, const char[] sNewValue)
{
    GetCvars();

    HookEvents(g_bCvar_Enabled);
}

/****************************************************************************************************/

public void GetCvars()
{
    g_bCvar_Enabled = g_hCvar_Enabled.BoolValue;
    g_iCvar_Bots = g_hCvar_Bots.IntValue;
    g_bCvar_Bots = (g_iCvar_Bots > 0);
    g_iCvar_Team = g_hCvar_Team.IntValue;
    g_bCvar_Team = (g_iCvar_Team > 0);
    g_iCvar_AnnounceTeam = g_hCvar_AnnounceTeam.IntValue;
    g_bCvar_AnnounceTeam = (g_iCvar_AnnounceTeam > 0);
    g_bCvar_AnnounceSelf = g_hCvar_AnnounceSelf.BoolValue;
    g_iCvar_Molotov = g_hCvar_Molotov.IntValue;
    g_bCvar_MolotovTouch = g_hCvar_MolotovTouch.BoolValue;
    g_bCvar_MolotovAnnounce = g_hCvar_MolotovAnnounce.BoolValue;
    g_fCvar_MolotovDelay = g_hCvar_MolotovDelay.FloatValue;
    g_bCvar_MolotovDelay = (g_fCvar_MolotovDelay > 0.0);
    g_iCvar_PipeBomb = g_hCvar_PipeBomb.IntValue;
    g_bCvar_PipeBombTouch = g_hCvar_PipeBombTouch.BoolValue;
    g_bCvar_PipeBombAnnounce = g_hCvar_PipeBombAnnounce.BoolValue;

    if (g_bL4D2)
    {
        g_iCvar_VomitJar = g_hCvar_VomitJar.IntValue;
        g_bCvar_VomitJarTouch = g_hCvar_VomitJarTouch.BoolValue;
        g_bCvar_VomitJarAnnounce = g_hCvar_VomitJarAnnounce.BoolValue;
        g_fCvar_VomitJarDuration = g_hCvar_VomitJarDuration.FloatValue;
        g_bCvar_Grenade = g_hCvar_Grenade.BoolValue;
        g_bCvar_GrenadeAnnounce = g_hCvar_GrenadeAnnounce.BoolValue;
    }

    g_iCvar_SI = g_hCvar_SI.IntValue;
}

/****************************************************************************************************/

public void HookEvents(bool hook)
{
    if (!g_bL4D2) // L4D1 doesn't have "weapon_drop" event
        return;

    if (hook && !g_bEventsHooked)
    {
        g_bEventsHooked = true;

        HookEvent("weapon_drop", Event_WeaponDrop);

        return;
    }

    if (!hook && g_bEventsHooked)
    {
        g_bEventsHooked = false;

        UnhookEvent("weapon_drop", Event_WeaponDrop);

        return;
    }
}

/****************************************************************************************************/

public void LateLoad()
{
    int entity;

    entity = INVALID_ENT_REFERENCE;
    while ((entity = FindEntityByClassname(entity, "weapon_*")) != INVALID_ENT_REFERENCE)
    {
       RequestFrame(OnNextFrame, EntIndexToEntRef(entity));
    }

    entity = INVALID_ENT_REFERENCE;
    while ((entity = FindEntityByClassname(entity, "*")) != INVALID_ENT_REFERENCE)
    {
        if (!HasEntProp(entity, Prop_Send, "m_bIsLive")) // *_projectile
            continue;

        RequestFrame(OnNextFrame, EntIndexToEntRef(entity));
    }
}

/****************************************************************************************************/

public void OnEntityDestroyed(int entity)
{
    if (!g_bConfigLoaded)
        return;

    if (!IsValidEntityIndex(entity))
        return;

    ge_iClass[entity] = CLASS_NONE;
    ge_iType[entity] = TYPE_NONE;
}

/****************************************************************************************************/

public void OnEntityCreated(int entity, const char[] classname)
{
    if (!g_bConfigLoaded)
        return;

    if (!IsValidEntityIndex(entity))
        return;

    switch (classname[0])
    {
        case 'w':
        {
            // weapon_molotov OR weapon_molotov_spawn
            // weapon_pipe_bomb OR weapon_pipe_bomb_spawn
            // weapon_vomitjar OR weapon_vomitjar_spawn
            RequestFrame(OnNextFrame, EntIndexToEntRef(entity));
            return;
        }

        case 'm', // molotov_projectile
             'p', // pipe_bomb_projectile
             'v', // vomitjar_projectile
             'g': // grenade_launcher_projectile
        {
            if (HasEntProp(entity, Prop_Send, "m_bIsLive")) // *_projectile
            {
                RequestFrame(OnNextFrame, EntIndexToEntRef(entity));
                return;
            }
        }
    }
}

/****************************************************************************************************/

public void OnSpawnPost(int entity)
{
    RequestFrame(OnNextFrame, EntIndexToEntRef(entity));
}

/****************************************************************************************************/

public void OnNextFrame(int entityRef)
{
    if (!g_bCvar_Enabled)
        return;

    int entity = EntRefToEntIndex(entityRef);

    if (entity == INVALID_ENT_REFERENCE)
        return;

    if (!HasEntProp(entity, Prop_Send, "m_nModelIndex"))
        return;

    char classname[2];
    GetEntityClassname(entity, classname, sizeof(classname));

    int entityClass = (classname[0] == 'w' ? CLASS_WEAPON : CLASS_PROJECTILE);

    int modelIndex = GetEntProp(entity, Prop_Send, "m_nModelIndex");

    if (modelIndex == g_iModel_Molotov)
    {
        if (!(entityClass & g_iCvar_Molotov))
            return;

        ge_iClass[entity] = entityClass;
        ge_iType[entity] = TYPE_MOLOTOV;
        SetEntProp(entity, Prop_Data, "m_takedamage", DAMAGE_YES);
        SDKHook(entity, SDKHook_OnTakeDamage, OnTakeDamage);

        switch (entityClass)
        {
            case CLASS_PROJECTILE:
            {
                SDKHook(entity, SDKHook_StartTouchPost, OnStartTouchPost);
            }
            case CLASS_WEAPON:
            {
                if (!g_bL4D2)
                    SDKHook(entity, SDKHook_ThinkPost, OnWeaponThinkPost);
            }
        }

        return;
    }

    if (modelIndex == g_iModel_Pipebomb)
    {
        if (!(entityClass & g_iCvar_PipeBomb))
            return;

        ge_iClass[entity] = entityClass;
        ge_iType[entity] = TYPE_PIPEBOMB;
        SetEntProp(entity, Prop_Data, "m_takedamage", DAMAGE_YES);
        SDKHook(entity, SDKHook_OnTakeDamage, OnTakeDamage);
        SDKHook(entity, SDKHook_StartTouchPost, OnStartTouchPost);

        switch (entityClass)
        {
            case CLASS_PROJECTILE:
            {
                SDKHook(entity, SDKHook_StartTouchPost, OnStartTouchPost);
            }
            case CLASS_WEAPON:
            {
                if (!g_bL4D2)
                    SDKHook(entity, SDKHook_ThinkPost, OnWeaponThinkPost);
            }
        }

        return;
    }

    if (!g_bL4D2)
        return;

    if (modelIndex == g_iModel_Vomitjar)
    {
        if (!(entityClass & g_iCvar_PipeBomb))
            return;

        ge_iClass[entity] = entityClass;
        ge_iType[entity] = TYPE_VOMITJAR;
        SetEntProp(entity, Prop_Data, "m_takedamage", DAMAGE_YES);
        SDKHook(entity, SDKHook_OnTakeDamage, OnTakeDamage);

        switch (entityClass)
        {
            case CLASS_PROJECTILE:
            {
                SDKHook(entity, SDKHook_StartTouchPost, OnStartTouchPost);
            }
        }

        return;
    }

    if (modelIndex == g_iModel_GrenadeLauncherBullet)
    {
        if (!g_bCvar_Grenade)
            return;

        ge_iClass[entity] = entityClass;
        ge_iType[entity] = TYPE_GRENADELAUNCHER;
        SetEntProp(entity, Prop_Data, "m_takedamage", DAMAGE_YES);
        SDKHook(entity, SDKHook_OnTakeDamage, OnTakeDamage);
        SDKHook(entity, SDKHook_StartTouchPost, OnStartTouchPost);
        return;
    }
}

/****************************************************************************************************/

public void Event_WeaponDrop(Event event, const char[] name, bool dontBroadcast)
{
    char item[2];
    event.GetString("item", item, sizeof(item));

    switch (item[0])
    {
        case 'm', // molotov
             'p', // pipe_bomb
             'v': // vomitjar
        {
            int entity = event.GetInt("propid");
            RequestFrame(OnNextFrame, EntIndexToEntRef(entity));
        }
    }
}

/****************************************************************************************************/

// L4D1 weapon drop fix
public void OnWeaponThinkPost(int entity)
{
    if (!g_bCvar_Enabled)
        return;

    if (GetEntProp(entity, Prop_Send, "m_hOwner") == -1)
        SetEntProp(entity, Prop_Data, "m_takedamage", DAMAGE_YES);
}

/****************************************************************************************************/

public void OnStartTouchPost(int entity, int other)
{
    if (!g_bCvar_Enabled)
        return;

    RequestFrame(OnNextFrameTouch, EntIndexToEntRef(entity)); // Wait a frame to don't bypass the default ground explosion
}

/****************************************************************************************************/

public void OnNextFrameTouch(int entityRef)
{
    if (!g_bCvar_Enabled)
        return;

    int entity = EntRefToEntIndex(entityRef);

    if (entity == INVALID_ENT_REFERENCE)
        return;

    int type = ge_iType[entity];

    float vPos[3];
    GetEntPropVector(entity, Prop_Send, "m_vecOrigin", vPos);

    switch (type)
    {
        case TYPE_MOLOTOV:
        {
            if (!g_bCvar_MolotovTouch)
                return;

            CreateParticle(PARTICLE_MOLOTOV, vPos, 1.0);

            SDKHooks_TakeDamage(entity, ENTITY_WORLDSPAWN, ENTITY_WORLDSPAWN, 0.0, DMG_GENERIC, -1, NULL_VECTOR, NULL_VECTOR);
        }
        case TYPE_PIPEBOMB:
        {
            if (!g_bCvar_PipeBombTouch)
                return;

            SDKHooks_TakeDamage(entity, ENTITY_WORLDSPAWN, ENTITY_WORLDSPAWN, 0.0, DMG_GENERIC, -1, NULL_VECTOR, NULL_VECTOR);
        }
        case TYPE_VOMITJAR:
        {
            if (!g_bCvar_VomitJarTouch)
                return;

            CreateParticle(PARTICLE_VOMITJAR, vPos, g_fCvar_VomitJarDuration);
            EmitSoundToAll(SOUND_VOMITJAR, entity, SNDCHAN_WEAPON, SNDLEVEL_SCREAMING);

            AcceptEntityInput(entity, "Kill");

            int goal = CreateEntityByName(CLASSNAME_INFO_GOAL_INFECTED_CHASE);
            DispatchKeyValue(entity, "targetname", "l4d_projectile_hittable");

            TeleportEntity(goal, vPos, NULL_VECTOR, NULL_VECTOR);
            DispatchSpawn(goal);
            ActivateEntity(goal);

            char buffer[32];
            FormatEx(buffer, sizeof(buffer), "OnUser1 !self:Kill::%.2f:-1", g_fCvar_VomitJarDuration);
            SetVariantString(buffer);
            AcceptEntityInput(goal, "AddOutput");
            AcceptEntityInput(goal, "FireUser1");
            AcceptEntityInput(goal, "Enable");
        }
    }
}

/****************************************************************************************************/

public Action OnTakeDamage(int victim, int &attacker, int &inflictor, float &damage, int &damagetype, int &weapon, float damageForce[3], float damagePosition[3])
{
    if (!g_bCvar_Enabled)
        return Plugin_Stop; // Prevents entity disappearing when hit

    if (!IsValidClient(attacker))
        return Plugin_Stop;

    if (IsFakeClient(attacker))
    {
        if (!g_bCvar_Bots)
            return Plugin_Stop;

        if (!(GetTeamFlag(GetClientTeam(attacker)) & g_iCvar_Bots))
            return Plugin_Stop;
    }
    else
    {
        if (!g_bCvar_Team)
            return Plugin_Stop;

        if (!(GetTeamFlag(GetClientTeam(attacker)) & g_iCvar_Team))
            return Plugin_Stop;
    }

    if (GetClientTeam(attacker) == TEAM_INFECTED)
    {
        if (!(GetZombieClassFlag(attacker) & g_iCvar_SI))
            return Plugin_Stop;
    }

    int type = ge_iType[victim];
    int entityClass = ge_iClass[victim];

    float vPos[3];
    GetEntPropVector(victim, Prop_Send, "m_vecOrigin", vPos);

    switch (type)
    {
        case TYPE_MOLOTOV:
        {
            if (!(entityClass & g_iCvar_Molotov))
                return Plugin_Stop;

            CreateParticle(PARTICLE_MOLOTOV, vPos, 1.0);

            switch (entityClass)
            {
                case CLASS_WEAPON:
                {
                    AcceptEntityInput(victim, "Kill");

                    int entity = CreateEntityByName(CLASSNAME_MOLOTOV_PROJECTILE);
                    DispatchKeyValue(entity, "targetname", "l4d_projectile_hittable");

                    TeleportEntity(entity, vPos, NULL_VECTOR, NULL_VECTOR);
                    DispatchSpawn(entity);
                    ActivateEntity(entity);

                    SetEntProp(entity, Prop_Send, "m_iTeamNum", IsValidClient(attacker) ? GetClientTeam(attacker) : 0);
                    SetEntPropFloat(entity, Prop_Send, "m_flDamage", 200.0);
                    SetEntPropEnt(entity, Prop_Send, "m_hOwnerEntity", IsValidClient(attacker) ? attacker : 0);
                    SetEntPropEnt(entity, Prop_Send, "m_hThrower", IsValidClient(attacker) ? attacker : 0); // Fix killer message
                    SetEntProp(entity, Prop_Data, "m_takedamage", DAMAGE_YES);
                    SDKHooks_TakeDamage(entity, attacker, attacker, damage, damagetype, weapon, damageForce, damagePosition);
                }

                case CLASS_PROJECTILE:
                {
                    if (g_bCvar_MolotovDelay)
                    {
                        EmitSoundToAll(SOUND_GLASS_BOTTLE_BREAK2, victim, SNDCHAN_WEAPON, SNDLEVEL_SCREAMING);

                        // Prevents creating another molotov fire on the ground
                        SetEntProp(victim, Prop_Data, "m_takedamage", DAMAGE_NO);
                        AcceptEntityInput(victim, "Kill");

                        int thrower = GetEntPropEnt(victim, Prop_Send, "m_hThrower");

                        DataPack pack = new DataPack();
                        pack.WriteFloat(vPos[0]);
                        pack.WriteFloat(vPos[1]);
                        pack.WriteFloat(vPos[2]);
                        pack.WriteCell(IsValidClient(thrower) ? GetClientUserId(thrower) : 0);
                        pack.WriteCell(IsValidClient(attacker) ? GetClientUserId(attacker) : 0);
                        pack.WriteFloat(damage);
                        pack.WriteCell(damagetype);
                        pack.WriteCell(weapon);
                        pack.WriteFloat(damageForce[0]);
                        pack.WriteFloat(damageForce[1]);
                        pack.WriteFloat(damageForce[2]);
                        pack.WriteFloat(damagePosition[0]);
                        pack.WriteFloat(damagePosition[1]);
                        pack.WriteFloat(damagePosition[2]);
                        pack.Reset();

                        CreateTimer(g_fCvar_MolotovDelay, TimerMolotovExplosion, pack);
                    }
                }
            }

            if (!g_bCvar_AnnounceTeam)
                return Plugin_Continue;

            if (!g_bCvar_MolotovAnnounce)
                return Plugin_Continue;

            for (int client = 1; client <= MaxClients; client++)
            {
                if (!IsClientInGame(client))
                    continue;

                if (IsFakeClient(client))
                    continue;

                if (attacker == client)
                {
                    if (!g_bCvar_AnnounceSelf)
                        continue;
                }
                else
                {
                    if (!(GetTeamFlag(GetClientTeam(client)) & g_iCvar_AnnounceTeam))
                        continue;
                }

                CPrintToChat(client, "%T", "Shot a molotov", client, attacker);
            }
        }
        case TYPE_PIPEBOMB:
        {
            if (!(entityClass & g_iCvar_PipeBomb))
                return Plugin_Stop;

            switch (entityClass)
            {
                case CLASS_WEAPON:
                {
                    AcceptEntityInput(victim, "Kill");

                    int entity = CreateEntityByName(CLASSNAME_PIPEBOMB_PROJECTILE);
                    DispatchKeyValue(entity, "targetname", "l4d_projectile_hittable");

                    TeleportEntity(entity, vPos, NULL_VECTOR, NULL_VECTOR);
                    DispatchSpawn(entity);
                    ActivateEntity(entity);

                    SetEntProp(entity, Prop_Send, "m_iTeamNum", IsValidClient(attacker) ? GetClientTeam(attacker) : 0);
                    SetEntPropFloat(entity, Prop_Send, "m_flDamage", 25.0);
                    SetEntPropEnt(entity, Prop_Send, "m_hOwnerEntity", IsValidClient(attacker) ? attacker : 0);
                    SetEntPropEnt(entity, Prop_Send, "m_hThrower", IsValidClient(attacker) ? attacker : 0); // Fix killer message
                    SetEntProp(entity, Prop_Data, "m_takedamage", DAMAGE_YES);
                    SDKHooks_TakeDamage(entity, attacker, attacker, damage, damagetype, weapon, damageForce, damagePosition);
                }
            }

            if (!g_bCvar_AnnounceTeam)
                return Plugin_Continue;

            if (!g_bCvar_PipeBombAnnounce)
                return Plugin_Continue;

            for (int client = 1; client <= MaxClients; client++)
            {
                if (!IsClientInGame(client))
                    continue;

                if (IsFakeClient(client))
                    continue;

                if (attacker == client)
                {
                    if (!g_bCvar_AnnounceSelf)
                        continue;
                }
                else
                {
                    if (!(GetTeamFlag(GetClientTeam(client)) & g_iCvar_AnnounceTeam))
                        continue;
                }

                CPrintToChat(client, "%T", "Shot a pipe bomb", client, attacker);
            }
        }

        case TYPE_VOMITJAR:
        {
            if (!(entityClass & g_iCvar_VomitJar))
                return Plugin_Stop;

            CreateParticle(PARTICLE_VOMITJAR, vPos, g_fCvar_VomitJarDuration);
            EmitSoundToAll(SOUND_VOMITJAR, victim, SNDCHAN_WEAPON, SNDLEVEL_SCREAMING);

            // Prevents creating another "info_goal_infected_chase" entity at 0,0,0 pos
            SetEntProp(victim, Prop_Data, "m_takedamage", DAMAGE_NO);
            AcceptEntityInput(victim, "Kill");

            int entity = CreateEntityByName(CLASSNAME_INFO_GOAL_INFECTED_CHASE);
            DispatchKeyValue(entity, "targetname", "l4d_projectile_hittable");

            TeleportEntity(entity, vPos, NULL_VECTOR, NULL_VECTOR);
            DispatchSpawn(entity);
            ActivateEntity(entity);

            char buffer[32];
            FormatEx(buffer, sizeof(buffer), "OnUser1 !self:Kill::%.2f:-1", g_fCvar_VomitJarDuration);
            SetVariantString(buffer);
            AcceptEntityInput(entity, "AddOutput");
            AcceptEntityInput(entity, "FireUser1");
            AcceptEntityInput(entity, "Enable");

            if (!g_bCvar_AnnounceTeam)
                return Plugin_Continue;

            if (!g_bCvar_VomitJarAnnounce)
                return Plugin_Continue;

            for (int client = 1; client <= MaxClients; client++)
            {
                if (!IsClientInGame(client))
                    continue;

                if (IsFakeClient(client))
                    continue;

                if (attacker == client)
                {
                    if (!g_bCvar_AnnounceSelf)
                        continue;
                }
                else
                {
                    if (!(GetTeamFlag(GetClientTeam(client)) & g_iCvar_AnnounceTeam))
                        continue;
                }

                CPrintToChat(client, "%T", "Shot a vomit jar", client, attacker);
            }
        }
        case TYPE_GRENADELAUNCHER:
        {
            if (!g_bCvar_Grenade)
                return Plugin_Continue;

            if (!g_bCvar_AnnounceTeam)
                return Plugin_Continue;

            if (!g_bCvar_GrenadeAnnounce)
                return Plugin_Continue;

            for (int client = 1; client <= MaxClients; client++)
            {
                if (!IsClientInGame(client))
                    continue;

                if (IsFakeClient(client))
                    continue;

                if (attacker == client)
                {
                    if (!g_bCvar_AnnounceSelf)
                        continue;
                }
                else
                {
                    if (!(GetTeamFlag(GetClientTeam(client)) & g_iCvar_AnnounceTeam))
                        continue;
                }

                CPrintToChat(client, "%T", "Shot a grenade", client, attacker);
            }
        }
    }

    return Plugin_Continue;
}

/****************************************************************************************************/

public Action TimerMolotovExplosion(Handle timer, DataPack pack)
{
    float vPos[3];
    int thrower;
    int attacker;
    float damage;
    int damagetype;
    int weapon;
    float damageForce[3];
    float damagePosition[3];

    vPos[0] = pack.ReadFloat();
    vPos[1] = pack.ReadFloat();
    vPos[2] = pack.ReadFloat();
    thrower = GetClientOfUserId(pack.ReadCell());
    attacker = GetClientOfUserId(pack.ReadCell());
    damage = pack.ReadFloat();
    damagetype = pack.ReadCell();
    weapon = pack.ReadCell();
    damageForce[0] = pack.ReadFloat();
    damageForce[1] = pack.ReadFloat();
    damageForce[2] = pack.ReadFloat();
    damagePosition[0] = pack.ReadFloat();
    damagePosition[1] = pack.ReadFloat();
    damagePosition[2] = pack.ReadFloat();
    pack.Close();

    int entity = CreateEntityByName(CLASSNAME_MOLOTOV_PROJECTILE);
    DispatchKeyValue(entity, "targetname", "l4d_projectile_hittable");

    TeleportEntity(entity, vPos, NULL_VECTOR, NULL_VECTOR);
    DispatchSpawn(entity);
    ActivateEntity(entity);

    SetEntProp(entity, Prop_Send, "m_iTeamNum", IsValidClient(attacker) ? GetClientTeam(attacker) : 0);
    SetEntPropFloat(entity, Prop_Send, "m_flDamage", 200.0);
    SetEntPropEnt(entity, Prop_Send, "m_hOwnerEntity", IsValidClient(attacker) ? attacker : 0);
    SetEntPropEnt(entity, Prop_Send, "m_hThrower", IsValidClient(thrower) ? thrower : 0); // Fix killer message
    SetEntProp(entity, Prop_Data, "m_takedamage", DAMAGE_YES);
    SDKHooks_TakeDamage(entity, attacker, attacker, damage, damagetype, weapon, damageForce, damagePosition);
}

/****************************************************************************************************/

public void CreateParticle(const char[] particle, float vPos[3], float duration)
{
    int entity = CreateEntityByName("info_particle_system");
    DispatchKeyValue(entity, "targetname", "l4d_projectile_hittable");
    DispatchKeyValue(entity, "effect_name", particle);

    TeleportEntity(entity, vPos, NULL_VECTOR, NULL_VECTOR);
    DispatchSpawn(entity);
    ActivateEntity(entity);

    AcceptEntityInput(entity, "Start");
    char buffer[32];
    FormatEx(buffer, sizeof(buffer), "OnUser1 !self:Kill::%.2f:-1", duration);
    SetVariantString(buffer);
    AcceptEntityInput(entity, "AddOutput");
    AcceptEntityInput(entity, "FireUser1");
}

// ====================================================================================================
// Admin Commands
// ====================================================================================================
public Action CmdPrintCvars(int client, int args)
{
    PrintToConsole(client, "");
    PrintToConsole(client, "======================================================================");
    PrintToConsole(client, "");
    PrintToConsole(client, "--------------- Plugin Cvars (l4d_projectile_hittable) ---------------");
    PrintToConsole(client, "");
    PrintToConsole(client, "l4d_projectile_hittable_version : %s", PLUGIN_VERSION);
    PrintToConsole(client, "l4d_projectile_hittable_enable : %b (%s)", g_bCvar_Enabled, g_bCvar_Enabled ? "true" : "false");
    PrintToConsole(client, "l4d_projectile_hittable_bots : %i (%s)", g_iCvar_Bots, g_bCvar_Bots ? "true" : "false");
    PrintToConsole(client, "l4d_projectile_hittable_team : %i (%s)", g_iCvar_Team, g_bCvar_Team ? "true" : "false");
    PrintToConsole(client, "l4d_projectile_hittable_announce_team : %i", g_iCvar_AnnounceTeam);
    PrintToConsole(client, "l4d_projectile_hittable_molotov : %i (%s)", g_iCvar_Molotov, g_iCvar_Molotov > 0 ? "true" : "false");
    PrintToConsole(client, "l4d_projectile_hittable_molotov_touch : %b (%s)", g_bCvar_MolotovTouch, g_bCvar_MolotovTouch ? "true" : "false");
    PrintToConsole(client, "l4d_projectile_hittable_molotov_announce : %b (%s)", g_bCvar_MolotovAnnounce, g_bCvar_MolotovAnnounce ? "true" : "false");
    PrintToConsole(client, "l4d_projectile_hittable_molotov_delay : %.2f (%s)", g_fCvar_MolotovDelay, g_bCvar_MolotovDelay ? "true" : "false");
    PrintToConsole(client, "l4d_projectile_hittable_pipebomb : %i (%s)", g_iCvar_PipeBomb, g_iCvar_PipeBomb > 0 ? "true" : "false");
    PrintToConsole(client, "l4d_projectile_hittable_pipebomb_touch : %b (%s)", g_bCvar_PipeBombTouch, g_bCvar_PipeBombTouch ? "true" : "false");
    PrintToConsole(client, "l4d_projectile_hittable_pipebomb_announce : %b (%s)", g_bCvar_PipeBombAnnounce, g_bCvar_PipeBombAnnounce ? "true" : "false");
    if (g_bL4D2)
    {
        PrintToConsole(client, "l4d_projectile_hittable_vomitjar : %i (%s)", g_iCvar_VomitJar, g_iCvar_VomitJar > 0 ? "true" : "false");
        PrintToConsole(client, "l4d_projectile_hittable_vomitjar_touch : %b (%s)", g_bCvar_VomitJarTouch, g_bCvar_VomitJarTouch ? "true" : "false");
        PrintToConsole(client, "l4d_projectile_hittable_vomitjar_announce : %b (%s)", g_bCvar_VomitJarAnnounce, g_bCvar_VomitJarAnnounce ? "true" : "false");
        PrintToConsole(client, "l4d_projectile_hittable_vomitjar_duration : %.2f", g_fCvar_VomitJarDuration);
        PrintToConsole(client, "l4d_projectile_hittable_grenade : %b (%s)", g_bCvar_Grenade, g_bCvar_Grenade ? "true" : "false");
        PrintToConsole(client, "l4d_projectile_hittable_grenade_announce : %b (%s)", g_bCvar_GrenadeAnnounce, g_bCvar_GrenadeAnnounce ? "true" : "false");
    }
    PrintToConsole(client, "l4d_projectile_hittable_si : %i (%s)", g_iCvar_SI, g_iCvar_SI > 0 ? "true" : "false");
    PrintToConsole(client, "");
    PrintToConsole(client, "======================================================================");
    PrintToConsole(client, "");

    return Plugin_Handled;
}

// ====================================================================================================
// Helpers
// ====================================================================================================
/**
 * Validates if is a valid client index.
 *
 * @param client        Client index.
 * @return              True if client index is valid, false otherwise.
 */
bool IsValidClientIndex(int client)
{
    return (1 <= client <= MaxClients);
}

/****************************************************************************************************/

/**
 * Validates if is a valid client.
 *
 * @param client        Client index.
 * @return              True if client index is valid and client is in game, false otherwise.
 */
bool IsValidClient(int client)
{
    return (IsValidClientIndex(client) && IsClientInGame(client));
}

/****************************************************************************************************/

/**
 * Validates if is a valid entity index (between MaxClients+1 and 2048).
 *
 * @param entity        Entity index.
 * @return              True if entity index is valid, false otherwise.
 */
bool IsValidEntityIndex(int entity)
{
    return (MaxClients+1 <= entity <= GetMaxEntities());
}

/****************************************************************************************************/

/**
 * Returns the team flag from a team.
 *
 * @param team          Team index.
 * @return              Team flag.
 */
int GetTeamFlag(int team)
{
    switch (team)
    {
        case TEAM_SURVIVOR:
            return FLAG_TEAM_SURVIVOR;
        case TEAM_INFECTED:
            return FLAG_TEAM_INFECTED;
        case TEAM_SPECTATOR:
            return FLAG_TEAM_SPECTATOR;
        case TEAM_HOLDOUT:
            return FLAG_TEAM_HOLDOUT;
        default:
            return FLAG_TEAM_NONE;
    }
}

/****************************************************************************************************/
/**
 * Gets the client L4D1/L4D2 zombie class id.
 *
 * @param client     Client index.
 * @return L4D1      1=SMOKER, 2=BOOMER, 3=HUNTER, 4=WITCH, 5=TANK, 6=NOT INFECTED
 * @return L4D2      1=SMOKER, 2=BOOMER, 3=HUNTER, 4=SPITTER, 5=JOCKEY, 6=CHARGER, 7=WITCH, 8=TANK, 9=NOT INFECTED
 */
int GetZombieClass(int client)
{
    return (GetEntProp(client, Prop_Send, "m_zombieClass"));
}

/****************************************************************************************************/

/**
 * Returns the zombie class flag from a zombie class.
 *
 * @param client        Client index.
 * @return              Client zombie class flag.
 */
int GetZombieClassFlag(int client)
{
    int zombieClass = GetZombieClass(client);

    if (g_bL4D2)
    {
        switch (zombieClass)
        {
            case L4D2_ZOMBIECLASS_SMOKER:
                return L4D2_FLAG_ZOMBIECLASS_SMOKER;
            case L4D2_ZOMBIECLASS_BOOMER:
                return L4D2_FLAG_ZOMBIECLASS_BOOMER;
            case L4D2_ZOMBIECLASS_HUNTER:
                return L4D2_FLAG_ZOMBIECLASS_HUNTER;
            case L4D2_ZOMBIECLASS_SPITTER:
                return L4D2_FLAG_ZOMBIECLASS_SPITTER;
            case L4D2_ZOMBIECLASS_JOCKEY:
                return L4D2_FLAG_ZOMBIECLASS_JOCKEY;
            case L4D2_ZOMBIECLASS_CHARGER:
                return L4D2_FLAG_ZOMBIECLASS_CHARGER;
            case L4D2_ZOMBIECLASS_TANK:
                return L4D2_FLAG_ZOMBIECLASS_TANK;
            default:
                return L4D2_FLAG_ZOMBIECLASS_NONE;
        }
    }
    else
    {
        switch (zombieClass)
        {
            case L4D1_ZOMBIECLASS_SMOKER:
                return L4D1_FLAG_ZOMBIECLASS_SMOKER;
            case L4D1_ZOMBIECLASS_BOOMER:
                return L4D1_FLAG_ZOMBIECLASS_BOOMER;
            case L4D1_ZOMBIECLASS_HUNTER:
                return L4D1_FLAG_ZOMBIECLASS_HUNTER;
            case L4D1_ZOMBIECLASS_TANK:
                return L4D1_FLAG_ZOMBIECLASS_TANK;
            default:
                return L4D1_FLAG_ZOMBIECLASS_NONE;
        }
    }
}

/****************************************************************************************************/

public void PrecacheParticle(const char[] particle)
{
    static int table = INVALID_STRING_TABLE;

    if (table == INVALID_STRING_TABLE)
        table = FindStringTable("ParticleEffectNames");

    if (FindStringIndex(table, particle) == INVALID_STRING_INDEX)
    {
        bool save = LockStringTables(false);
        AddToStringTable(table, particle);
        LockStringTables(save);
    }
}

// ====================================================================================================
// colors.inc replacement (Thanks to Silvers)
// ====================================================================================================
/**
 * Prints a message to a specific client in the chat area.
 * Supports color tags.
 *
 * @param client        Client index.
 * @param message       Message (formatting rules).
 * @return              No return.
 *
 * On error/Errors:     If the client is not connected an error will be thrown.
 */
public void CPrintToChat(int client, char[] message, any ...)
{
    static char buffer[512];
    VFormat(buffer, sizeof(buffer), message, 3);

    ReplaceString(buffer, sizeof(buffer), "{default}", "\x01");
    ReplaceString(buffer, sizeof(buffer), "{white}", "\x01");
    ReplaceString(buffer, sizeof(buffer), "{cyan}", "\x03");
    ReplaceString(buffer, sizeof(buffer), "{lightgreen}", "\x03");
    ReplaceString(buffer, sizeof(buffer), "{orange}", "\x04");
    ReplaceString(buffer, sizeof(buffer), "{green}", "\x04"); // Actually orange in L4D1/L4D2, but replicating colors.inc behaviour
    ReplaceString(buffer, sizeof(buffer), "{olive}", "\x05");

    PrintToChat(client, buffer);
}