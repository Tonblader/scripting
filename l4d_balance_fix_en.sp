/* Plugin Template generated by Pawn Studio */

#pragma semicolon 1
#pragma newdecls required
#include <sourcemod>
#include <sdktools>
#include <sdktools_functions>

#define ZOMBIECLASS_SURVIVOR	9
#define ZOMBIECLASS_SMOKER	1
#define ZOMBIECLASS_BOOMER	2
#define ZOMBIECLASS_HUNTER	3
#define ZOMBIECLASS_SPITTER	4
#define ZOMBIECLASS_JOCKEY	5
#define ZOMBIECLASS_CHARGER	6
int ZOMBIECLASS_TANK = 5;

int GameMode;
int L4D2Version;

bool Debug = true;
/* 
* 
* some code from "L4D2 Monster Bots",	author = "Machine"
* 
*/
public Plugin myinfo = 
{
	name = "Automatic Difficult Balance base on intensity",
	author = "Pan Xiaohai && Zakikun",
	description = "Auto adjust difficulty base on Director's intensity measure",
	version = "1.4",
	url = "wyxls123@gmail.com"
}

bool ShowHud[MAXPLAYERS+1];
 
int CurrentAverage; 

int PlayerIntensity[MAXPLAYERS+1];
int PlayerTotalIntensity[MAXPLAYERS+1];
int PlayerTick[MAXPLAYERS+1];

bool NeedDrawHud = false;
bool HaveTank = false;

int AllTotalIntensity;
int AllTotalTick=1; 

int CiCount;
int SiCount;
int SurvivorCount;

int MobTick;

int MaxSpecial;
int MaxCommon;

int AdustTick;
int DirectorStopTick;
bool DirectorStoped;
bool LeftSafeRoom;

Handle l4d_balance_difficulty_min;
Handle l4d_balance_difficulty_max;
Handle l4d_balance_difficulty_zero;
Handle l4d_balance_difficulty_tank;

Handle l4d_balance_enable; 
Handle l4d_balance_reaction_time; 
//Handle l4d_balance_setting_password; 

Handle l4d_balance_include_bot;
Handle l4d_balance_include_zombie;
Handle l4d_balance_include_witch;

Handle l4d_balance_health_increment; 
Handle l4d_balance_health_witch;
Handle l4d_balance_health_tank; 
Handle l4d_balance_health_hunter;
Handle l4d_balance_health_smoker; 
Handle l4d_balance_health_boomer;
Handle l4d_balance_health_charger; 
Handle l4d_balance_health_jockey; 
Handle l4d_balance_health_spitter; 
Handle l4d_balance_health_zombie; 

Handle l4d_balance_limit_special; 
Handle l4d_balance_limit_special_add; 
Handle l4d_balance_limit_common;
Handle l4d_balance_limit_common_add;
Handle hTimerAjust;
Handle hPlayerLeftStart;
Handle hTimerUpdatePlayer;
Handle hTimerShowHUD;

public void OnPluginStart()
{
	GameCheck(); 	
	if(GameMode != 1) return;
	l4d_balance_enable = 			CreateConVar("l4d_balance_enable", "1", "0:diable balacne, 1:enable");
	l4d_balance_reaction_time = 	CreateConVar("l4d_balance_reaction_time", "30", "reaction time of balance system [10, 60]seconds"); 
	
	l4d_balance_difficulty_min = 	CreateConVar("l4d_balance_difficulty_min", "25", "min difficulty,  if intensity less than this value, the balance will start, infected will accumulate[0, 100]");
	l4d_balance_difficulty_max = 	CreateConVar("l4d_balance_difficulty_max", "99", "max difficult, if intensity more than this value, then turn off the director[0, 100]");
	l4d_balance_difficulty_zero = 	CreateConVar("l4d_balance_difficulty_zero", "0", "spawn on intensity 0");
	l4d_balance_difficulty_tank = 	CreateConVar("l4d_balance_difficulty_tank", "0", "spawn when there is a tank");
	l4d_balance_include_bot = 	 	CreateConVar("l4d_balance_include_bot", "0", "Do the balance system calculate survivor bots 0: ignore survivor bots , 1:include survivor bots");
	l4d_balance_include_zombie=		CreateConVar("l4d_balance_include_zombie", "0", "Do the balance system increase common zombie's HP 0: ignore , 1:yes");
	l4d_balance_include_witch=		CreateConVar("l4d_balance_include_witch", "0", "Do the balance system increase witch's HP 0: ignore , 1:yes");
	//l4d_balance_setting_password = 	CreateConVar("l4d_balance_setting_password", "", "password for seting diffulty"); 

	l4d_balance_health_increment= 	CreateConVar("l4d_balance_health_add", "20", "The percentage of special infected's health increment for each extra player [0, 50]"); 	
	l4d_balance_health_tank= 		CreateConVar("l4d_balance_health_tank", "4000", "tank's original health"); 	
	l4d_balance_health_witch=		CreateConVar("l4d_balance_health_witch", "1000", "witch's original health");
	l4d_balance_health_hunter=		CreateConVar("l4d_balance_health_hunter", "250", "hunter's original health"); 
	l4d_balance_health_smoker= 		CreateConVar("l4d_balance_health_smoker", "250", "smoker's original health"); 
	l4d_balance_health_boomer=		CreateConVar("l4d_balance_health_boomer", "50", "boomer's original health"); 
	l4d_balance_health_charger= 	CreateConVar("l4d_balance_health_charger", "600", "charger's original health"); 
	l4d_balance_health_jockey= 		CreateConVar("l4d_balance_health_jockey", "325", "jockey's original health"); 
	l4d_balance_health_spitter= 	CreateConVar("l4d_balance_health_spitter", "100", "spitter's original health"); 
	l4d_balance_health_zombie= 		CreateConVar("l4d_balance_health_zombie", "50", "zombie's original health"); 

	l4d_balance_limit_special= 		CreateConVar("l4d_balance_limit_special", "4", "the limit of special infected [0, 20]");
	l4d_balance_limit_special_add= 	CreateConVar("l4d_balance_limit_special_add", "1", " The increment of special's limit for each extra player [0, 5]");
	l4d_balance_limit_common= 		CreateConVar("l4d_balance_limit_common", "30", " z_common_limit [30, 100]"); 
	l4d_balance_limit_common_add= 	CreateConVar("l4d_balance_limit_common_add", "5", " The increment of z_common_limit for each extra player[0, 30]"); 
 	
	AutoExecConfig(true, "l4d_balance");
	
	RegConsoleCmd("sm_balance", sm_balance); 
	RegConsoleCmd("sm_difficulty", sm_difficulty); 
	RegConsoleCmd("sm_dinfo", sm_dinfo); 
	HookEvent("player_spawn", player_spawn);	
	HookEvent("player_death", player_death); 
	
	HookEvent("round_start", round_start);
	HookEvent("round_end", round_end);
	HookEvent("finale_win", map_transition);
	HookEvent("mission_lost", round_end);
	HookEvent("map_transition",  map_transition);	  	
	
	//set variables
	LeftSafeRoom = false;
	
	//resetstate
	ResetAllState();
}

public Action sm_balance(int client, int args)
{
	if(client > 0)
	{
		ShowHud[client]=!ShowHud[client];
	}
}
 
public Action sm_dinfo(int client, int args)
{
	if(client > 0)
	{
		char msgstr[500] = "";
		Format(msgstr, 500, "Survior Count : %d \n", SurvivorCount);
		Format(msgstr, 500, "\n%sTank's Health: %d to %d \n", msgstr, RoundFloat(GetConVarFloat(l4d_balance_health_tank)), RoundFloat( GetConVarFloat(FindConVar("z_tank_health"))));
		Format(msgstr, 500, "%sWitch's Health: %d to %d \n", msgstr, RoundFloat(GetConVarFloat(l4d_balance_health_witch)), RoundFloat( GetConVarFloat(FindConVar("z_witch_health"))));
		Format(msgstr, 500, "%sZombie's Health: %d to %d \n", msgstr, RoundFloat(GetConVarFloat(l4d_balance_health_zombie)), RoundFloat( GetConVarFloat(FindConVar("z_health"))));
		Format(msgstr, 500, "%sSmoker's Health: %d to %d \n", msgstr, RoundFloat(GetConVarFloat(l4d_balance_health_smoker)), RoundFloat( GetConVarFloat(FindConVar("z_gas_health"))));
		Format(msgstr, 500, "%sHunter's Health: %d to %d \n", msgstr, RoundFloat(GetConVarFloat(l4d_balance_health_hunter)), RoundFloat( GetConVarFloat(FindConVar("z_hunter_health"))));
		Format(msgstr, 500, "%sBoomer's Health: %d to %d \n", msgstr, RoundFloat(GetConVarFloat(l4d_balance_health_boomer)), RoundFloat( GetConVarFloat(FindConVar("z_exploding_health"))));
		if(L4D2Version)
		{
			Format(msgstr, 500, "%sCharger's Health: %d to %d \n", msgstr, RoundFloat(GetConVarFloat(l4d_balance_health_charger)), RoundFloat( GetConVarFloat(FindConVar("z_charger_health"))));
			Format(msgstr, 500, "%sSpitter's Health: %d to %d \n", msgstr, RoundFloat(GetConVarFloat(l4d_balance_health_spitter)), RoundFloat( GetConVarFloat(FindConVar("z_spitter_health"))));
			Format(msgstr, 500, "%sJockey's Health: %d to %d \n", msgstr, RoundFloat(GetConVarFloat(l4d_balance_health_jockey)), RoundFloat( GetConVarFloat(FindConVar("z_jockey_health"))));
		}
		Format(msgstr, 500, "\n%sSpecial infected limit : %d to %d \n", msgstr, GetConVarInt(l4d_balance_limit_special),  MaxSpecial);
		Format(msgstr, 500, "%sz_common_limit: %d to %d \n", msgstr, GetConVarInt(l4d_balance_limit_common),  RoundFloat( GetConVarFloat(FindConVar("z_common_limit"))));
		Format(msgstr, 500, "%sz_background_limit: %d \n", msgstr, RoundFloat( GetConVarFloat(FindConVar("z_background_limit"))));
		Format(msgstr, 500, "%sz_mega_mob_size: %d \n", msgstr,  RoundFloat( GetConVarFloat(FindConVar("z_mega_mob_size"))));

		PrintToChat(client, "Please check console output");
		PrintToConsole(client, msgstr);
	}
}
 
public Action sm_difficulty(int client, int args)
{
	if(client > 0)
	{
		//char password[20] = "";
		char arg[20];
		//GetConVarString(l4d_balance_setting_password, password, sizeof(password));
		GetCmdArg(1, arg, sizeof(arg));
		//quite clave
		//PrintToChatAll("arg %s, password %s", arg, password);
		//if(StrEqual(arg, password))
		//{
		//	GetCmdArg(2, arg, sizeof(arg));		 
		int d = StringToInt(arg);
		if(d >= 0 && d <= GetConVarInt(l4d_balance_difficulty_max))
		{				
			PrintToChatAll("The difficulty change from %d to %d", GetConVarInt(l4d_balance_difficulty_min), d);
			SetConVarInt(FindConVar("l4d_balance_difficulty_min"), d);
		}
		else
		{
			PrintToChat(client, "Value must >= 0 and <= %n",GetConVarInt(l4d_balance_difficulty_max));				
		}
		//}
		//else
		//{
		//	PrintToChat(client, "Your password is incorrect");
		//	PrintToChatAll("The current difficulty is %d", GetConVarInt(l4d_balance_difficulty_min));
		//}
	}
}

public Action player_spawn(Event hEvent, const char[] strName, bool DontBroadcast)
{
	int client = GetClientOfUserId(GetEventInt(hEvent, "userid")); 
	if(client > 0)
	{
		ShowHud[client] = false;
	}
}

public Action player_death(Event hEvent, const char[] strName, bool DontBroadcast)
{
//	int client = GetClientOfUserId(GetEventInt(hEvent, "userid"));
	//quite el hud al morir
	//if(client > 0)
	//{
	//	ShowHud[client] = true;
	//	if(IsClientInGame(client)) PrintToChat(client, "!balance to turn off Hud");
	//}
}

public Action round_start(Event event, const char[] name, bool dontBroadcast)
{
	ResetAllState();
	int flags = GetConVarFlags(FindConVar("z_max_player_zombies"));
	SetConVarBounds(FindConVar("z_max_player_zombies"), ConVarBound_Upper, false);
	SetConVarFlags(FindConVar("z_max_player_zombies"), flags & ~FCVAR_NOTIFY);
	hPlayerLeftStart = CreateTimer(1.0, PlayerLeftStart, 0, TIMER_REPEAT|TIMER_FLAG_NO_MAPCHANGE);
	SetConVarInt(FindConVar("z_max_player_zombies"), 8);
		
}

public Action PlayerLeftStart(Handle Timer, any data)
{
	if (LeftStartArea())
	{
		// We don't care who left, just that at least one did
		if (!LeftSafeRoom)
		{
			LeftSafeRoom = true;
			hTimerUpdatePlayer = CreateTimer(1.0, TimerUpdatePlayer, 0, TIMER_REPEAT|TIMER_FLAG_NO_MAPCHANGE);
			hTimerShowHUD = CreateTimer(1.5, TimerShowHud, 0, TIMER_REPEAT|TIMER_FLAG_NO_MAPCHANGE);
			hTimerAjust = CreateTimer(2.0, TimerAjust, 0, TIMER_REPEAT|TIMER_FLAG_NO_MAPCHANGE);
		}
	}
	return Plugin_Continue;
}

public Action round_end(Event event, const char[] name, bool dontBroadcast)
{
	ResetAllState();
	LeftSafeRoom = false;

   	//Agregue los killtimer con verificacion de nulls

    // If Warmuptimer still running, active!
    // Kill timer
    if(hPlayerLeftStart != null) hPlayerLeftStart=null;


    // If Warmuptimer still running, active!
    // Kill timer
    if(hTimerUpdatePlayer != null) hTimerUpdatePlayer=null;


    // If Warmuptimer still running, active!
    // Kill timer
    if(hTimerShowHUD != null) hTimerShowHUD=null;


    // If Warmuptimer still running, active!
    // Kill timer
    if(hTimerAjust != null) hTimerAjust=null;

	for (int i = 1; i <= MaxClients; i++)
	{
		if (IsClientInGame(i))
		{
			if (GetClientTeam(i) == 3)
			{
				if (IsFakeClient(i))
				{
					KickClient(i);
				}
			}
		}
	}
}

public Action map_transition(Event event, const char[] name, bool dontBroadcast)
{
	int totalaverage = AllTotalIntensity / AllTotalTick; 
	PrintToServer("\x04[balance] \x01Map Change"); 
	PrintToServer("\x04[balance] \x01server intensity average %d", totalaverage); 
    int max_index = 0;
	for(int i = 1; i <= MaxClients; i++)
	{
        //PrintToChatAll("Client(%i) collected", i);
		if(IsClientInGame(i) && GetClientTeam(i) == 2)
		{	
			PrintToServer("\x04[balance] \x01%N intensity average %d", i, PlayerTotalIntensity[max_index]/PlayerTick[max_index]); 
		}
        max_index++;
	}
	PrintToServer("\x04[balance] \x01Total PlayersonTransition %d", max_index); 
	ResetAllState(); 
}

public void OnMapStart()
{
	ResetAllState();
}

public void OnMapEnd()
{
	LeftSafeRoom = false;
}

void ResetAllState()
{ 
	AllTotalIntensity=0;
	AllTotalTick=1;
	DirectorStoped=false;
	AdustTick = GetConVarInt(l4d_balance_reaction_time);//l4d_balance_reaction_time
	DirectorStopTick = GetConVarInt(l4d_balance_reaction_time);
	CiCount = SiCount = 0;
	NeedDrawHud = false;
	MobTick = 0;
	HaveTank = false;
	SurvivorCount = 1;
    int max_index = 0;
	for(int i = 1; i <= MaxClients; i++)
	{
		PlayerIntensity[max_index] = 0;
		PlayerTotalIntensity[max_index] = 0;
		PlayerTick[max_index] = 1;
        max_index++;
	}
}

public Action TimerUpdatePlayer(Handle timer, any data)
{
	int playercout = 0;
	int currentAverage = 0;
	int infectedCount = 0;
	int difficult = GetConVarInt(l4d_balance_difficulty_min);//take the minimum from convar
	int diffinf = GetConVarInt(l4d_balance_difficulty_min);
	int diffsup = GetConVarInt(l4d_balance_difficulty_max);
	bool spawnonzero = GetConVarInt(l4d_balance_difficulty_zero) == 1;
	bool spawnontank = GetConVarInt(l4d_balance_difficulty_tank) == 1;
	int reactionTime = GetConVarInt(l4d_balance_reaction_time);
	bool needDrawHud = false;
	bool haveTank = false;
 	int survivorCount = 0;
	bool includeBot = GetConVarInt(l4d_balance_include_bot) == 1;
    int max_index = 0;
	for( int i = 1; i <= MaxClients; i++)
	{
		if(IsClientInGame(i))
		{
			if(GetClientTeam(i) == 2)
			{
				bool fake = IsFakeClient(i);
				if(!includeBot && fake) continue;
				if(IsPlayerAlive(i))
				{
					PlayerIntensity[max_index] = GetEntProp(i, Prop_Send, "m_clientIntensity" );
					PlayerTotalIntensity[max_index] += PlayerIntensity[max_index]; 
					currentAverage += PlayerIntensity[max_index];
				}
				else
				{
					PlayerIntensity[max_index] = difficult;//put the minimum from convar to players not alive
					PlayerTotalIntensity[max_index] += PlayerIntensity[max_index]; 
					currentAverage += PlayerIntensity[max_index];
				}				
				PlayerTick[max_index]++; 
				playercout++;
				if(ShowHud[i] && !fake) needDrawHud = true;
				survivorCount++;
			}
			else if(IsPlayerAlive(i))
			{
				infectedCount++;
				if(IsInfected(i, ZOMBIECLASS_TANK)) haveTank = true;
			}
		}
		else PlayerIntensity[max_index] = 0;		
		max_index++;
	}
	SurvivorCount = survivorCount;
	HaveTank = haveTank;
	NeedDrawHud = needDrawHud;
	if(playercout > 0) CurrentAverage = currentAverage / playercout; 
		else CurrentAverage = 0;
	AllTotalIntensity += CurrentAverage;
	AllTotalTick++;	
	
	SiCount = infectedCount;
	
	//int limit = 20;
	//
	//DirectorStopTick = 0//Decreasing difficulty
	// DirectorStopTick--
	// AdustTick++     //AdustTick hasta reactiontime   
	//limit= 20
	//CurrentAverage SI ESTA EN DONDE
	//AdustTick = 0//Increasing difficulty//SPAWNEA
	//AdustTick--
	//MIN--
	// AdustTick++     //AdustTick hasta reactiontime   
	//  
	//DirectorStopTick++//Director no parara  
	//MAX--80
	// DirectorStopTick--
	//DirectorStopTick = 0//Decreasing difficulty DirectorStoped=true
	
	/*
	if((CurrentAverage <  diffinf&&CurrentAverage>limit)) AdustTick--;
	else AdustTick++;//CurrentAverage mayor igual que el cvarmin adusttick aumenta
    if(AdustTick <= 0) AdustTick = 0;//Increasing difficulty - CurrentAverage < menor que el cvardifmin - Spawnear
	if(AdustTick >= reactionTime) AdustTick = reactionTime;//adustick no puede ser mayor que cvarreactionTime tick
	
	if(HaveTank) AdustTick = reactionTime;//si hay tank adustick=reactionTime
	
	if(CurrentAverage > diffmax || CurrentAverage<limit) DirectorStopTick--;//CurrentAverage mayor que el cvardifmax DirectorStopTick lo resta
	else DirectorStopTick++;//CurrentAverage menor que el cvardifmax DirectorStopTick aumenta
	if(DirectorStopTick <= 0) DirectorStopTick = 0;//Deccreasing difficulty - CurrentAverage > wmayor que el cvardifmax - Para Director
	if(DirectorStopTick >= reactionTime) DirectorStopTick = reactionTime;//DirectorStopTick no puede ser mayor que cvarreactionTime tick
	*/
	
	//SOLO SPAWNEA DE 0 A INF
	//AdustTick = 0//Increasing difficulty//SPAWNEA
	//AdustTick--
	//INF
	// AdustTick++     //AdustTick hasta reactiontime   
	//  
		
		
	//SOLO PARA DE SUP A 100
	//DirectorStopTick++//Director no parara  
	//SUP--80
	// DirectorStopTick--
	//DirectorStopTick = 0//Decreasing difficulty DirectorStoped=true
		
		/*
	if((0 <  diffinf)||(!auxzero) AdustTick--;
	      SI          Y  (NO)
	if((1 <  diffinf)||(!auxzero) AdustTick--;
	      SI          Y   (NO)
	if((0 <  diffinf)||(!auxzero) AdustTick--;
	      SI          Y  (SI)
					NO		  
	if((1 <  diffinf)||(!auxzero) AdustTick--;
	      SI          Y   (SI)
					NO
	*/
	
	//CurrentAverage menor que el cvardifmin adusttick resta que era cvarreactionTime
	if((CurrentAverage <  diffinf)) AdustTick--;
	else AdustTick++;//CurrentAverage mayor igual que el cvarmin adusttick aumenta
	if (CurrentAverage==0 && !spawnonzero) AdustTick++;
	if(AdustTick <= 0) AdustTick = 0;//Increasing difficulty - CurrentAverage < menor que el cvardifmin - Spawnear
	if(AdustTick >= reactionTime) AdustTick = reactionTime;//adustick no puede ser mayor que cvarreactionTime tick
	
	if(HaveTank&&spawnontank) AdustTick = reactionTime;//si hay tank adustick=reactionTime
	
	if(CurrentAverage > diffsup) DirectorStopTick--;//CurrentAverage mayor que el cvardifmax DirectorStopTick lo resta
	else DirectorStopTick++;//CurrentAverage menor que el cvardifmax DirectorStopTick aumenta
	if(DirectorStopTick <= 0) DirectorStopTick = 0;//Decreasing difficulty - CurrentAverage > wmayor que el cvardifmax - Para Director
	if(DirectorStopTick >= reactionTime) DirectorStopTick = reactionTime;//DirectorStopTick no puede ser mayor que cvarreactionTime tick
	
	
	if(Debug)
	{
		int totalaverage = AllTotalIntensity/AllTotalTick; 
		PrintToServer("\x04[balance] \x01intensitys: current average %d, round average %d, ticks %d", CurrentAverage, totalaverage,AllTotalTick); 
	}

	return Plugin_Continue;
}

public Action TimerAjust(Handle timer, any data)
{
	int siNeed = 0;
	int ciNeed = 0;
	int mobNeed = 0;
	int enable = GetConVarInt(l4d_balance_enable);
	if(enable == 0) return Plugin_Continue;

	int reactionTime = GetConVarInt(l4d_balance_reaction_time);
	UpdateSeting();
	if(DirectorStopTick == 0)
	{
		if(!DirectorStoped)
		{
			PrintToServer("Director Stopped"); 
		}
		SetConVarInt(FindConVar("director_no_specials"), 1);
		SetConVarInt(FindConVar("director_no_mobs"), 1);
		DirectorStoped=true;
	}
	else
	{
		if(DirectorStoped)
		{
			PrintToServer("Director Started"); 
		}
		SetConVarInt(FindConVar("director_no_specials"), 0);
		SetConVarInt(FindConVar("director_no_mobs"), 0);		
		DirectorStoped = false;
	}
	CiCount = GetInfectedCount();
	
	bool client = GetAnyClient();
	if(client && AdustTick == 0 ) 
	{			
		//8 infectados especiales, SI
		//SetConVarInt(FindConVar("z_max_player_zombies"), 8);
		if(SiCount < MaxSpecial)
		{ 
			siNeed = 1;	  
		}
		MobTick += 2;
		if(CiCount < MaxCommon)
		{
			ciNeed = 0; 
			if( MobTick >= reactionTime)
			{				
				mobNeed = 1;
			}
		}
		
		
		if(siNeed > 0 || ciNeed > 0 || mobNeed > 0){
			
			Z_Spawn_Old(siNeed, ciNeed, mobNeed);
		
			if(Debug)
			{
				PrintToServer("\x04[balance] \x01spawneando si %d, ci %d, mob %d", siNeed, ciNeed, mobNeed); 
			}
	
		}
	}
	else MobTick = 0;
	return Plugin_Continue;   
}

void UpdateSeting()
{ 
	float inc = GetConVarFloat(l4d_balance_health_increment) / 100.0;	
	int survivorCount = SurvivorCount;
	if(survivorCount < 4) survivorCount = 4;	
	inc = inc * (survivorCount - 4);
	
	
	if( GetConVarInt(l4d_balance_include_zombie) == 1 )
	{
		//CI
		SetConVarFloat(FindConVar("z_health"),  GetConVarFloat(l4d_balance_health_zombie) * (1.0 + inc));	
		//SI
		SetConVarFloat(FindConVar("z_hunter_health"),  GetConVarFloat(l4d_balance_health_hunter) * (1.0 + inc));
		SetConVarFloat(FindConVar("z_gas_health"),  GetConVarFloat(l4d_balance_health_smoker) * (1.0 + inc));
		SetConVarFloat(FindConVar("z_exploding_health"),  GetConVarFloat(l4d_balance_health_boomer) * (1.0 + inc));
		if(L4D2Version)
		{
			SetConVarFloat(FindConVar("z_charger_health"), GetConVarFloat(l4d_balance_health_charger) * (1.0 + inc));
			SetConVarFloat(FindConVar("z_spitter_health"),  GetConVarFloat(l4d_balance_health_spitter) * (1.0 + inc));
			SetConVarFloat(FindConVar("z_jockey_health"),  GetConVarFloat(l4d_balance_health_jockey) * (1.0 + inc));
		}
		SetConVarFloat(FindConVar("z_tank_health"),  GetConVarFloat(l4d_balance_health_tank) * (1.0 + inc));
		
	}
	else
	{
		//SetConVarFloat(FindConVar("z_health"),  GetConVarFloat(l4d_balance_health_zombie) * (1.0));	
	}
	
	
	if( GetConVarInt(l4d_balance_include_witch) == 1 )
	{
		SetConVarFloat(FindConVar("z_witch_health"),  GetConVarFloat(l4d_balance_health_witch) * (1.0 + inc));
	}
	else
	{
		//SetConVarFloat(FindConVar("z_witch_health"),  GetConVarFloat(l4d_balance_health_witch) * (1.0));
	}
	
	MaxSpecial = GetConVarInt(l4d_balance_limit_special);
	MaxSpecial += GetConVarInt(l4d_balance_limit_special_add) * (survivorCount);		
	
	MaxCommon = GetConVarInt(l4d_balance_limit_common); 
	MaxCommon += GetConVarInt(l4d_balance_limit_common_add) * (survivorCount);		
	SetConVarFloat(FindConVar("z_common_limit"), MaxCommon * 1.0);
	SetConVarFloat(FindConVar("z_background_limit"), MaxCommon * 0.5);
	SetConVarFloat(FindConVar("z_mega_mob_size"), MaxCommon * 1.0);
}
 
public Action TimerDelayStartAjust(Handle timer, any data)
{
	CreateTimer(2.0, TimerAjust, 0, TIMER_REPEAT|TIMER_FLAG_NO_MAPCHANGE);
}

Handle pInfHUD 		= INVALID_HANDLE;

public Action TimerShowHud(Handle timer, any data)
{
	if(!NeedDrawHud)return Plugin_Continue;
	pInfHUD = CreatePanel(GetMenuStyleHandle(MenuStyle_Default));
	char buffer[65];	
 	SetPanelTitle(pInfHUD, "Difficulty Balance System"); 
	Format(buffer, sizeof(buffer), "Intensity Statistics, Difficulty is ( %d - %d )", GetConVarInt(l4d_balance_difficulty_min),GetConVarInt(l4d_balance_difficulty_max));	
	DrawPanelItem(pInfHUD, buffer, ITEMDRAW_RAWLINE);
	DrawPanelItem(pInfHUD, " ", ITEMDRAW_SPACER|ITEMDRAW_RAWLINE);
 
	Format(buffer, sizeof(buffer), "Current : %d ",  CurrentAverage);
	DrawPanelItem(pInfHUD, buffer);
	
	int totalaverage = AllTotalIntensity / AllTotalTick;
	Format(buffer, sizeof(buffer), "Avarage : %d ", totalaverage);
	DrawPanelItem(pInfHUD, buffer);
	
	if(AdustTick == 0) Format(buffer, sizeof(buffer), "Increasing difficulty");
	else Format(buffer, sizeof(buffer), "Countdown to increase difficulty: %d",  AdustTick);
	DrawPanelItem(pInfHUD, buffer);	
	
	if(DirectorStopTick == 0) Format(buffer, sizeof(buffer), "Decreasing difficulty");
	else Format(buffer, sizeof(buffer), "Countdown to decrease difficulty: %d",  DirectorStopTick);
	DrawPanelItem(pInfHUD, buffer);		
	
	DrawPanelItem(pInfHUD, " ", ITEMDRAW_SPACER|ITEMDRAW_RAWLINE); 
	DrawPanelItem(pInfHUD, "Infected", ITEMDRAW_RAWLINE);
	
	int sicount = SiCount;
 	 
	int cicount = CiCount;
	
	Format(buffer, sizeof(buffer), "Special infected (%d) : %d ", MaxSpecial, sicount);
	DrawPanelItem(pInfHUD, buffer );
	Format(buffer, sizeof(buffer), "Common infected (%d): %d ", MaxCommon, cicount);
	DrawPanelItem(pInfHUD, buffer );	
	
	DrawPanelItem(pInfHUD, " ", ITEMDRAW_SPACER|ITEMDRAW_RAWLINE); 
	DrawPanelItem(pInfHUD, "Survivor Intensity"); 
	DrawPanelItem(pInfHUD, " ", ITEMDRAW_SPACER|ITEMDRAW_RAWLINE);
	
	bool includeBot = GetConVarInt(l4d_balance_include_bot) == 1;
    int max_index = 0;
	for (int i = 1; i <= MaxClients; i++)
	{
		if (!IsClientInGame(i)) continue;
		if (GetClientTeam(i) == 3) continue;
		if (!includeBot && IsFakeClient(i)) continue;  
		 
		
		{
		
		
			int a = PlayerTotalIntensity[max_index] / PlayerTick[max_index];
			Format(buffer, sizeof(buffer), "%N (%d) : %d ", i  ,a, PlayerIntensity[max_index]);
			if (i<4) DrawPanelItem(pInfHUD, buffer ,ITEMDRAW_RAWLINE);
			max_index++;
		}
	}
	Format(buffer, sizeof(buffer), "Total Players Now : %d ", max_index);
	DrawPanelItem(pInfHUD, buffer);
			
	for (int i = 1; i <= MaxClients; i++)
	{
		if(!IsClientInGame(i)) continue;
		if(IsFakeClient(i)) continue;  
		if(!ShowHud[i]) continue;
		if (GetClientMenu(i) == MenuSource_RawPanel || GetClientMenu(i) == MenuSource_None)
		{	
			SendPanelToClient(pInfHUD, i, Menu_InfHUDPanel, 1); 			
		}
	}
	CloseHandle(pInfHUD);  
	return Plugin_Continue;
}

public int Menu_InfHUDPanel(Menu menu, MenuAction action, int param1, int param2) { return; }

void Z_Spawn_Old(int siCount, int ciCount, int mob)
{
	int bot = CreateFakeClient("Monster");
	if (bot > 0)
	{		
		ChangeClientTeam(bot,3);
		for(int i = 0; i < siCount; i++)
		{ 
			int random = GetRandomInt(1, 6);
			if(!L4D2Version) random = GetRandomInt(1, 3);
			switch(random)
			{
				case 1:
					SpawnCommand(bot, "z_spawn_old", "smoker auto");
				case 2:
					SpawnCommand(bot, "z_spawn_old", "boomer auto");
				case 3:
					SpawnCommand(bot, "z_spawn_old", "hunter auto");
				case 4:
					SpawnCommand(bot, "z_spawn_old", "spitter auto");
				case 5:
					SpawnCommand(bot, "z_spawn_old", "jockey auto");
				case 6:
					SpawnCommand(bot, "z_spawn_old", "charger auto");
			}
		}
		for(int i = 0; i < ciCount; i++)
		{
			SpawnCommand(bot, "z_spawn_old", "auto");
		}
		if(mob > 0)
		{
			SpawnCommand(bot, "z_spawn", "mob"); 			
			MobTick = 0;
		}
		Kickbot(INVALID_HANDLE, bot);
		//CreateTimer(0.1,Kickbot,bot);
	}	  
}

public Action Kickbot(Handle timer, any client)
{
	if (IsClientInGame(client))
	{
		if (IsFakeClient(client))
		{
			KickClient(client);
		}
	}
}

stock void SpawnCommand(int client, char[] command, char[] arguments = "")
{
	if (client)
	{ 
		int flags = GetCommandFlags(command);
		SetCommandFlags(command, flags & ~FCVAR_CHEAT);
		FakeClientCommand(client, "%s %s", command, arguments);
		SetCommandFlags(command, flags);
	}
}

int GetInfectedCount()
{
	int ent = -1;
	int count = 0;
	while ((ent = FindEntityByClassname(ent,  "infected" )) != -1)
	{
		count++;
	}
	return count;
}

void GameCheck()
{
	char GameName[16];
	GetConVarString(FindConVar("mp_gamemode"), GameName, sizeof(GameName));
	
	if (StrEqual(GameName, "survival", false))
		GameMode = 3;
	else if (StrEqual(GameName, "versus", false) || StrEqual(GameName, "teamversus", false) || StrEqual(GameName, "scavenge", false) || StrEqual(GameName, "teamscavenge", false))
		GameMode = 2;
	else if (StrEqual(GameName, "coop", false) || StrEqual(GameName, "realism", false))
		GameMode = 1;
	else
	{
		GameMode = 0;
 	}
	
	GetGameFolderName(GameName, sizeof(GameName));
	if (StrEqual(GameName, "left4dead2", false))
	{
		ZOMBIECLASS_TANK = 8;
		L4D2Version = true;
	}	
	else
	{
		ZOMBIECLASS_TANK = 5;
		L4D2Version = false;
	}
}

int IsInfected(int client, int type)
{
	int class = GetEntProp(client, Prop_Send, "m_zombieClass");
	if(type == class) return true;
	else return false;
}

bool LeftStartArea()
{
	int ent = -1, maxents = GetMaxEntities();
	for (int i = MaxClients+1; i <= maxents; i++)
	{
		if (IsValidEntity(i))
		{
			char netclass[64];
			GetEntityNetClass(i, netclass, sizeof(netclass));
			
			if (StrEqual(netclass, "CTerrorPlayerResource"))
			{
				ent = i;
				break;
			}
		}
	}
	
	if (ent > -1)
	{
		int offset = FindSendPropInfo("CTerrorPlayerResource", "m_hasAnySurvivorLeftSafeArea");
		if (offset > 0)
		{
			if (GetEntData(ent, offset))
			{
				if (GetEntData(ent, offset) == 1) return true;
			}
		}
	}
	return false;
}


bool GetAnyClient ()
{
	int i =0;
	for (  i = 1; i <= MaxClients; i++)
	{
		if (IsClientConnected(i) && IsClientInGame(i) && (!IsFakeClient(i)))
			return true;
	}
	return false;
}

